const int START_BALANCE = 1500;
const int MAX_PLAYERS = 4;
const enum tSensors COLOR_CARD = S1;
const enum tSensors COLOR_BILL = S2;
const enum tSensors TOUCH_ENC_ZERO = S3;


#include "PC_FileIO.c"

const enum TTimers GAMETIME = T1;

void updateLedger(TFileHandle & fout, int transactionType, int currPlayer, int transferee, int accountBalance, int amount){

	long transactionTimeSeconds = (long) time1[GAMETIME]/1000;
	long transactionTimeMinutes = transactionTimeSeconds/60;
	long transactionTimeHours = transactionTimeMinutes/60;

	transactionTimeSeconds -= transactionTimeMinutes*60;
	transactionTimeMinutes -= transactionTimeHours*60;

	string transactionNames[] = {"Withdraw","Deposit","Transfer","Declared Bankrupcty"};

	writeTextPC(fout, "Time: ");
	writeLongPC(fout, transactionTimeHours);
	writeTextPC(fout, ":");
	writeLongPC(fout, transactionTimeMinutes);
	writeTextPC(fout, ":");writeLongPC(fout, transactionTimeSeconds);
	writeTextPC(fout, " ");

	writeTextPC(fout, "| Player: ");
	writeLongPC(fout, currPlayer);
	writeTextPC(fout, " ");

	writeTextPC(fout, "| Type: ");
	writeTextPC(fout, transactionNames[transactionType]);
	writeTextPC(fout, " ");

	if(transactionType != 3){
		writeTextPC(fout, "| Amount: ");
		writeLongPC(fout, amount);
		writeTextPC(fout, " ");
		if(transactionType == 2){
			writeTextPC(fout, "to Player ");
			writeLongPC(fout, transferee);
			writeTextPC(fout, " ");
		}
		writeTextPC(fout, "| Updated player balance: ");
		writeLongPC(fout, accountBalance);
	}
	
	writeEndlPC(fout);
}

int senseCard()
{
	long red, green, blue;
	getColorRGB(COLOR_CARD, red, green, blue);
	red=blue=green=0;
	getColorRGB(COLOR_CARD, red, green, blue);

	int colorCount[5] = {0,0,0,0,0};

	int numReadings = 0;

	while (numReadings < 10){
		//pink
			if(red<=140&&red>=30 && green<=150/100.0*red&&green>=36/100.0*red && blue<=70/100.0*red&&blue>=20/100.0*red)
				colorCount[1]++;
		//blue
			else if(red<=60/100.0*blue&&red>=38/100.0*blue && green<=70/100.0*blue&&green>=50/100.0*blue && blue<=30&&blue>=15)
				colorCount[2]++;
		//red
			else if(red<=80&&red>=30 && green<=20/100.0*red&&green>=3/100.0*red && blue<=20/100.0*red&&blue>=5/100.0*red)
				colorCount[3]++;
		//green
			else if(red<=70/100.0*green&&red>=50/100.0*green && green<=80&&green>=20 && blue<=70/100.0*green&&blue>=50/100.0*green)
				colorCount[4]++;
		//brown
				else if(red<=15&&red>=2 && green<=70/100.0*red&&green>=40/100.0*red && blue<=70/100.0*red&&blue>=40/100.0*red)
				colorCount[0]++;
	numReadings++;
	}

	int maxColorCount = 0;
	int maxColorIndex = 0;

	for (int index = 0; index < 5; index++)
		if (colorCount[index] > maxColorCount){
			maxColorCount = colorCount[index];
			maxColorIndex = index;
		}

	if (maxColorCount > 0)
		return maxColorIndex;
	return -1;
}

void sensorConfig()
{
	SensorType[COLOR_CARD] = sensorEV3_Color;
	wait1Msec(50);
	SensorMode[COLOR_CARD] = modeEV3Color_Color;
	wait1Msec(50);

	SensorType[COLOR_BILL] = sensorEV3_Color;
	wait1Msec(50);
	SensorMode[COLOR_BILL] = modeEV3Color_RGB_Raw;
	wait1Msec(50);

	SensorType[TOUCH_ENC_ZERO] = sensorEV3_Touch;
}

void setupPlayers(int & numPlayers, int * accountBalance, bool * isPlaying)
{
	eraseDisplay();

	displayString(2,"Enter number of players");

	while(!(getButtonPress(buttonUp) || getButtonPress(buttonLeft) || getButtonPress(buttonRight) || getButtonPress(buttonDown)));

	if(getButtonPress(buttonUp))
	{
		while (getButtonPress(buttonUp));
		numPlayers = 1;
	}
	
	else if(getButtonPress(buttonLeft))
	{
		while (getButtonPress(buttonLeft));
		numPlayers = 2;
	}
	
	else if(getButtonPress(buttonRight))
	{
		while (getButtonPress(buttonRight));
		numPlayers = 3;
	}
	
	else
	{
		while (getButtonPress(buttonDown));
		numPlayers = 4;
	}
	
	for (int index = 0; index < numPlayers; index++)
	{
		isPlaying[index] = 1;
		accountBalance[index] = START_BALANCE;
	}
}

void setCurrPlayer(int & currPlayer, bool * isPlaying)
{
	int readPlayer = -1;
	currPlayer = -1;
	while(currPlayer == -1)
	{
		if (SensorValue[COLOR_CARD] == (int)colorRed)
			readPlayer = 0;
		else if (SensorValue[COLOR_CARD] == (int)colorBlue)
			readPlayer = 1;
		else if (SensorValue[COLOR_CARD] == (int)colorYellow)
			readPlayer = 2;
		else if (SensorValue[COLOR_CARD] == (int)colorGreen)
			readPlayer = 3;
	
		if (readPlayer != -1 && isPlaying[readPlayer] == 1)
			currPlayer = readPlayer;
	}
}

void displayMainMenu(int currPlayer, int * accountBalance)
{
	eraseDisplay();
	displayString(2, "Currently processing transactions for player %d, account Balance: %d", currPlayer, accountBalance[currPlayer]);
	displayString(4, "1: Withdraw");
	displayString(5, "2: Deposit");
	displayString(6, "3: Transfer");
	displayString(7, "4: Declare Bankrupcty");
	displayString(8, "5: Cancel Transaction");
}

void declareBankruptcy(int currentPlayer, int & numPlayers, bool * isPlaying, int * accountBalance, bool & continueTransaction)
{
	eraseDisplay();
	
	displayString(2,"Are you sure you want to declare bankruptcy and leave the game?");
	displayString(4, "1: Yes, my friends have screwed me over...");
	displayString(5, "2: No, get me out of here!");
	
	while(!(getButtonPress(buttonUp) || getButtonPress(buttonLeft)));
	
	if (getButtonPress(buttonUp))
	{
		while(getButtonPress(buttonUp));
		
		eraseDisplay();
		displayString(2,"You have fallen to the almighty hand of capitalism!");
		
		isPlaying[currentPlayer] = 0;
		accountBalance[currentPlayer] = 0;
		numPlayers--;
		continueTransaction = 0;
	}
	
	else
		while (getButtonPress(buttonLeft));
}

void promptContinue(bool & continueTransaction)
{
	eraseDisplay();
	displayString(2,"Do you want to continue with your transactions?");
	displayString(4, "1: Yes");
	displayString(5, "2: No");
	
	while (!(getButtonPress(buttonUp) || getButtonPress(buttonLeft)));
	
	if (getButtonPress(buttonUp))
		while (getButtonPress(buttonUp));

	else
	{
		while (getButtonPress(buttonLeft));
		continueTransaction = 0;
	}
}

void doTransaction(int currentPlayer, int & numPlayers, bool * isPlaying, int * accountBalance, bool & continueTransaction)
{
	while(!getButtonPress(ButtonAny));
	
	if(getButtonPress(buttonUp))
	{
		while (getButtonPress(buttonUp));
		//withdraw(parameters);
	}
	
	else if(getButtonPress(buttonLeft))
	{
		while (getButtonPress(buttonLeft));
		//deposit(parameters);
	}
	
	else if(getButtonPress(buttonRight))
	{
		while (getButtonPress(buttonRight));
		//transfer(parameters);
	}
	
	else if(getButtonPress(buttonDown))
	{
		while (getButtonPress(buttonDown));
		declareBankruptcy(currentPlayer, numPlayers, isPlaying, accountBalance, continueTransaction);
	}
	
	else
	{
		while (getButtonPress(buttonEnter));
		promptContinue(continueTransaction);
	}
}

void declareWinner(bool * isPlaying)
{
	eraseDisplay();
	
	for (int index = 0; index < 4; index++)
		if (isPlaying[index] == 1)
			displayString(2, "Player %d has won the Monopoly!", index);
	
	wait10Msec(1000);
}

task main()
{
	sensorConfig();

	int numPlayers = 0;
	bool isPlaying[MAX_PLAYERS] = {0,0,0,0};
	int accountBalance[MAX_PLAYERS] = {0,0,0,0};

	setupPlayers(numPlayers, accountBalance, isPlaying);
	
	while(numPlayers > 1)
	{
		eraseDisplay();
		displayString(2, "Please swipe your card to start a transaction");
		
		int currPlayer = -1;
		setCurrPlayer(currPlayer,isPlaying);
		
		bool continueTransaction = 1;
		do
		{
			displayMainMenu(currPlayer, accountBalance);
			doTransaction(currPlayer, numPlayers, isPlaying, accountBalance, continueTransaction);
			if(continueTransaction)
				promptContinue(continueTransaction);
		} while (continueTransaction == 1);
	}
	
	declareWinner(isPlaying);
}
