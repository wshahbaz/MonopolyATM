//need to declare function stubs so functions are declared ahead of time
bool withdraw(int& playerBalance, int* transactionBills, bool& doesContinue, bool isWithdraw){}
int receiveWithdrawBills(int& playerBalance, int* transactionBills, bool& doesContinue){}
void moveBillsOut(int* transactionBills){}
void cancelTransaction(int* transactionBills, bool& doesContinue){}
void clearChosenBills(int* transactionBills){}
void getLowerOptions(int& playerBalance, int* billWithdraws){}
void displayLowerOptions(int* billWithdraws){}
void displayHigherOptions(int* billWithdraws){}
void checkCancelOrClear(int* transactionBills, bool& doesContinue){}
void moveConveyer(int power);
bool isValidTransaction(int& playerBalance, int totalWithdraw, int bill){}





bool withdraw(int& playerBalance, int* transactionBills, bool& doesContinue, bool isWithdraw)
{
	doesContinue = false;
	//process withdraw transaction
	int withdraw = receiveWithdrawBills(playerBalance, transactionBills, doesContinue);
	//if uwer confirms transaction
	if (!doesContinue)
	{
		//update account
		playerBalance -= withdraw;
		//check if withdraw or transfer
		if (isWithdraw)
		{
			//move bills out for user
			moveConveyer(50);		//POSITIVE_CONVEYER = 50
			moveBillsOut(transactionBills);
		}
	}
	//if user denies transaction
	else
	{
		doesContinue = true;
	}
	return doesContinue;
}

int receiveWithdrawBills(int& playerBalance, int* transactionBills, bool& doesContinue)
{
	//lower options screen
	getLowerOptions(playerBalance, transactionBills, doesContinue);

	int totalWithdraw = calcWithdraw(billWithdraws);

	for (int bill = 0; bill < BILL_TYPES; bill++)
	{
		if (billWithdraws[bill] > 0)
		{
			for (int numBills =0; numBill < billWithdraws[bill]; numBills++)
			{
				moveArm(bill);
				pickupBill();
				centerArm();
				numBills++;
			}
		}
	}
	return totalWithdraw;
}

void moveBillsOut(int* transactionBills)
{
	for (int bill = 0; bill < BILL_TYPES; bill++)
	{
		if (transactionBills[bill] > 0)
		{
			for (int numBills =0; numBills < transactionBills[bill]; numBills++)
			{
				moveArm(bill);
				pickupBill();
				centerArm();
				numBills++;
			}
		}
	}
}

void cancelTransaction(int* transactionBills, bool& doesContinue)
{
	for (int bill = 0; bill < BILL_TYPES; bill++)
	{
		transactionBills[bill] = 0;
	}
	doesContinue = true;
	//set condition that exits displayLowerOptions, modified version for displayHigherOptions
}

void clearChosenBills(int* transactionBills)
{
	for (int bill = 0; bill < BILL_TYPES; bill++)
	{
		transactionBills[bill] = 0;
	}
}

void getLowerOptions(int& playerBalance, int* billWithdraws, bool& doesContinue)
{

		bool isDone = false;
		while (!isDone)
		{
			//wait for button press
			while (!getButtonPress(buttonAny));
			
			//check cancel or clear
			if (checkCancelOrClear(transactionBills, doesContinue))
			{
				//if player cancels transaction
				if (!doesContinue)
				{
					isDone = true;
				}
			}
			//check other single button options
			else if (getButtonPress(buttonUp) &&  isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 1)) {
				billWithdraws[0]++;
			}
			else if (getButtonPress(buttonLeft) && isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 5))
			{
				billWithdraws[1]++;
			}
			else if (getButtonPress(buttonRight) && isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 10))
			{
				billWithdraws[2]++;
			}
			else if (getButtonPress(buttonDown) && isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 20))
			{
				billWithdraws[3]++;
			}
			else if (getButtonPress(buttonEnter))
			{
				isDone = getHigherOptions(playerBalances, billWithdraws, doesContinue);	
			}
			//wait for user to release button
			while(getButtonPress(buttonAny));
		}
}

bool getHigherOptions(int& playerBalances, int* billWithdraws, bool& doesContinue)
{
	bool isHigherOptionsDone = false;
	while (!isHigherOptionsDone)
		{
			while (!getButtonPress(buttonAny));
			
			//check cancel or clear
			if (checkCancelOrClear(transactionBills, doesContinue))
			{
				//if player cancels transaction
				if (!doesContinue)
				{
					isHigherOptionsDone = true;
				}
			}
			//check other single button options
			else if (getButtonPress(buttonUp) &&  isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 50)) {
				billWithdraws[4]++;
			}
			else if (getButtonPress(buttonLeft) && isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 100))
			{
				billWithdraws[5]++;
			}
			else if (getButtonPress(buttonRight) && isValidTransaction(playerBalance, calcWithdraw(billWithdraws), 500))
			{
				billWithdraws[6]++;
			}
			//this button returns back to original screen
			else if (getButtonPress(buttonDown))
			{
				isHigherOptionsDone = true;
			}
			//wait for user to stop pressing button
			while(getButtonPress(buttonAny));
		}
		return doesContinue;
}

void displayLowerOptions(int* billWithdraws)
{
	eraseDisplay();
	displayString(1, "WITHDRAWAL LOWER OPTIONS");
	displayString(3, "$1 bills");
	displayString(4, "$5 bills");
	displayString(5, "$10 bills");
	displayString(6, "$20 bills");
	displayString(8, "TOTAL WITHDRAW: %d", calcWithdraw(billWithdraws));
}

void displayHigherOptions(int* billWithdraws)
{
	eraseDisplay();
	displayString(1, "WITHDRAWAL HIGHER OPTIONS");
	displayString(3, "$50 bills");
	displayString(4, "$100 bills");
	displayString(5, "$500 bills");
	displayString(8, "TOTAL WITHDRAW: %d", calcWithdraw(billWithdraws));
}

bool isValidTransaction(int& playerBalance, int totalWithdraw, int bill)
{
	if (playerBalance < totalWithdraw + bill)
	{
		return false;
	}
	else
	{
		return true;
	}
}

void checkCancelOrClear(int* transactionBills, bool& doesContinue)
{
	bool isOptionChosen = false;
	//check if want to quit
	if (getButtonPress(buttonLeft) || getButtonPress(buttonRight) || getButtonPress(buttonUp) || getButtonPress(buttonDown))
	{
		//check if they quit  ie top and bot buttons
		while(getButtonPress(buttonUp) && !isOptionChosen)
		{
			if (getButtonPress(buttonDown))
			{
				cancelTransaction(transactionBills, doesContinue);
				isOptionChosen = true;
			}
		}
		while(getButtonPress(buttonDown) && !isOptionChosen)
		{
			if (getButtonPress(buttonUp))
			{
				cancelTransaction(transactionBills, doesContinue);
				isOptionChosen = true;
			}
		}
		
		//check if they want to clear withdraw amount
		while(getButtonPress(buttonRight) && !isOptionChosen)
		{
			if (getButtonPress(buttonLeft))
			{
				clearChosenBills(transactionBills);
				isOptionChosen = true;
			}
		}
		while(getButtonPress(buttonLeft) && !isOptionChosen)
		{
			if (getButtonPress(buttonRight))
			{
				clearChosenBills(transactionBills);
				isOptionChosen = true;
			}
		}
	}
}

int calcTransactionAmount(int* transactionBills)
{
	int totalWithdraw = 0;
	int billValues[BILL_TYPES] = {1, 5, 10, 20, 50, 100, 500};
	for (int bill = 0; bill < 7; bill ++)
		totalWithdraw += billWithdraws[bill] * billValues[bill];
	return totalWithdraw;
}

int main(){}
